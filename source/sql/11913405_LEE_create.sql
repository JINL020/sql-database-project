--create users
CREATE TABLE users(
    userID INTEGER,
    nickname VARCHAR(30) NOT NULL UNIQUE,
    password VARCHAR(20) NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE,
    CONSTRAINT pk_users PRIMARY KEY(userID),
    CHECK(LENGTH(password)>=6)
);

--create users_sequence
CREATE SEQUENCE users_sequence;

--triger for sequence
CREATE OR REPLACE TRIGGER users_on_insert BEFORE INSERT ON users
    FOR EACH ROW
    BEGIN
    SELECT users_sequence.nextval
    INTO :new.userID
    FROM dual;
    END;

-----------------------------------------------------------------------------------
--create friend
CREATE TABLE friend(
    user1 INTEGER NOT NULL,
    user2 INTEGER NOT NULL,
    CONSTRAINT pk_friend PRIMARY KEY(user1,user2),
    CONSTRAINT fk_friend_user1 FOREIGN KEY(user1) REFERENCES users(userID)
    ON DELETE CASCADE,
    CONSTRAINT fk_friend_user2 FOREIGN KEY(user2) REFERENCES users(userID)
    ON DELETE CASCADE,
    CHECK(user1 != user2)
);

--create recipe
CREATE TABLE recipe(
    recipeID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    title VARCHAR(50) DEFAULT 'untitled' NOT NULL,
    prepTime INTEGER NOT NULL,
    description VARCHAR(200) DEFAULT 'no description' NOT NULL,
    writer INTEGER NOT NULL,
    CONSTRAINT pk_recipe PRIMARY KEY(recipeID),
    CONSTRAINT fk_recipe_writer FOREIGN KEY(writer) REFERENCES users(userID)
    ON DELETE CASCADE,
    CHECK(prepTime>0)
);

--create dish
CREATE TABLE dish(
    kcal INTEGER,
    category VARCHAR(20),
    recipeID INTEGER,
    CONSTRAINT pk_dish PRIMARY KEY(recipeID),
    CONSTRAINT fk_dish_recipeID FOREIGN KEY(recipeID) REFERENCES recipe(recipeID)
    ON DELETE CASCADE,
    CHECK(kcal>0)
);

--create beverage
CREATE TABLE beverage(
    alcoholPercentage INTEGER DEFAULT 0,
    HOTorCOLD VARCHAR(4) DEFAULT 'cold',
    recipeID INTEGER,
    CONSTRAINT pk_beverage PRIMARY KEY(recipeID),
    CONSTRAINT fk_beverage_recipeID FOREIGN KEY(recipeID) REFERENCES recipe(recipeID)
    ON DELETE CASCADE,
    CHECK(alcoholPercentage>=0 AND (HOTorCOLD = 'HOT' OR HOTorCOLD = 'COLD'))
);

 --create ingredient
CREATE TABLE ingredient(
    ingredientID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    ingredientName VARCHAR(50) NOT NULL UNIQUE,
    allergenCode CHAR(1),
    CONSTRAINT pk_ingredient PRIMARY KEY(ingredientID),
    CHECK((allergenCode BETWEEN 'A' AND 'H') OR (allergenCode BETWEEN 'L' AND 'P') OR (allergenCode = 'R'))
);

 --create needs
CREATE TABLE needs(
    recipe INTEGER NOT NULL,
    ingredient INTEGER NOT NULL,
    CONSTRAINT pk_needs PRIMARY KEY(recipe,ingredient),
    CONSTRAINT fk_needs_recipe FOREIGN KEY(recipe) REFERENCES recipe(recipeID)
    ON DELETE CASCADE,
    CONSTRAINT fk_needs_ingredient FOREIGN KEY(ingredient) REFERENCES ingredient(ingredientID)
    ON DELETE CASCADE
);

 --create comments
CREATE TABLE comments(
    commentID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    rating INTEGER NOT NULL,
    text VARCHAR(50),
    recipe INTEGER NOT NULL,
    CONSTRAINT pk_comment PRIMARY KEY(commentID,recipe),--wurde geändert:recipe zum PK hinzugefügt
    CONSTRAINT fk_comment_recipe FOREIGN KEY(recipe) REFERENCES recipe(recipeID)
    ON DELETE CASCADE,
    CHECK(rating BETWEEN 1 AND 5)
);

 --create compilation
CREATE TABLE compilation(
    compilationID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    title VARCHAR(50) DEFAULT 'untitled' NOT NULL,
    description VARCHAR(100) DEFAULT 'no description',
    userID INTEGER NOT NULL,
    CONSTRAINT pk_compilation PRIMARY KEY(compilationID),
    CONSTRAINT fk_compilation_userID FOREIGN KEY(userID) REFERENCES users(userID)
    ON DELETE CASCADE
);

 --create contains
CREATE TABLE contains(
    compilation INTEGER NOT NULL,
    recipe INTEGER NOT NULL,
    CONSTRAINT pk_contains PRIMARY KEY(recipe,compilation),
    CONSTRAINT fk_contains_recipe FOREIGN KEY(recipe) REFERENCES recipe(recipeID)
    ON DELETE CASCADE,
    CONSTRAINT fk_contains_compilation FOREIGN KEY(compilation) REFERENCES compilation(compilationID)
    ON DELETE CASCADE
);

----------------------------------------------------------------
--view: all users who posted atleast 2 recipes
CREATE VIEW wrote_at_least_2recipes(writer,posted_recipes) AS
(SELECT writer, count(recipeID)
FROM recipe
GROUP BY writer
HAVING count(recipeID) >= 2);

--view: all beverages
CREATE VIEW drinks AS
(SELECT * FROM recipe NATURAL INNER JOIN beverage);

----------------------------------------------------------------
CREATE OR REPLACE PROCEDURE p_delete_user(
   p_userID  IN  users.userID%TYPE,
   p_error_code OUT NUMBER
)
AS
  BEGIN
    DELETE  
    FROM users
    WHERE p_userID = users.userID;

    p_error_code := SQL%ROWCOUNT;
    IF (p_error_code = 1)
    THEN
      COMMIT;
    ELSE
      ROLLBACK;
    END IF;
    EXCEPTION
    WHEN OTHERS
    THEN
      p_error_code := SQLCODE;
  END p_delete_user;